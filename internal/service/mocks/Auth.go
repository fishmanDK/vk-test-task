// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	service "vk-test-task/internal/service"

	mock "github.com/stretchr/testify/mock"

	vk_test_task "vk-test-task"
)

// Auth is an autogenerated mock type for the Auth type
type Auth struct {
	mock.Mock
}

// Authentication provides a mock function with given fields: user
func (_m *Auth) Authentication(user vk_test_task.User) (vk_test_task.Tokens, error) {
	ret := _m.Called(user)

	var r0 vk_test_task.Tokens
	var r1 error
	if rf, ok := ret.Get(0).(func(vk_test_task.User) (vk_test_task.Tokens, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(vk_test_task.User) vk_test_task.Tokens); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(vk_test_task.Tokens)
	}

	if rf, ok := ret.Get(1).(func(vk_test_task.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: newUser
func (_m *Auth) CreateUser(newUser vk_test_task.CreateUser) error {
	ret := _m.Called(newUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(vk_test_task.CreateUser) error); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParseToken provides a mock function with given fields: accessToken
func (_m *Auth) ParseToken(accessToken string) (*service.ParseDataUser, error) {
	ret := _m.Called(accessToken)

	var r0 *service.ParseDataUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*service.ParseDataUser, error)); ok {
		return rf(accessToken)
	}
	if rf, ok := ret.Get(0).(func(string) *service.ParseDataUser); ok {
		r0 = rf(accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.ParseDataUser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuth interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuth creates a new instance of Auth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuth(t mockConstructorTestingTNewAuth) *Auth {
	mock := &Auth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
