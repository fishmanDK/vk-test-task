// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	storage "vk-test-task/internal/storage"

	vk_test_task "vk-test-task"
)

// Actors is an autogenerated mock type for the Actors type
type Actors struct {
	mock.Mock
}

// ChangeActor provides a mock function with given fields: idActor, changeDataActor
func (_m *Actors) ChangeActor(idActor string, changeDataActor vk_test_task.ChangeDataActor) error {
	ret := _m.Called(idActor, changeDataActor)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, vk_test_task.ChangeDataActor) error); ok {
		r0 = rf(idActor, changeDataActor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateActor provides a mock function with given fields: newActor
func (_m *Actors) CreateActor(newActor vk_test_task.NewActor) error {
	ret := _m.Called(newActor)

	var r0 error
	if rf, ok := ret.Get(0).(func(vk_test_task.NewActor) error); ok {
		r0 = rf(newActor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteActor provides a mock function with given fields: idActor
func (_m *Actors) DeleteActor(idActor string) error {
	ret := _m.Called(idActor)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(idActor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActorByID provides a mock function with given fields: id
func (_m *Actors) GetActorByID(id string) (*storage.Actor, error) {
	ret := _m.Called(id)

	var r0 *storage.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*storage.Actor, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *storage.Actor); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllActors provides a mock function with given fields:
func (_m *Actors) GetAllActors() (*[]storage.Actor, error) {
	ret := _m.Called()

	var r0 *[]storage.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]storage.Actor, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]storage.Actor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]storage.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewActors interface {
	mock.TestingT
	Cleanup(func())
}

// NewActors creates a new instance of Actors. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewActors(t mockConstructorTestingTNewActors) *Actors {
	mock := &Actors{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
