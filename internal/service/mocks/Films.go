// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	storage "vk-test-task/internal/storage"

	vk_test_task "vk-test-task"
)

// Films is an autogenerated mock type for the Films type
type Films struct {
	mock.Mock
}

// ChangeFilm provides a mock function with given fields: id, changedDataFilm
func (_m *Films) ChangeFilm(id string, changedDataFilm vk_test_task.ChangeDataFilm) error {
	ret := _m.Called(id, changedDataFilm)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, vk_test_task.ChangeDataFilm) error); ok {
		r0 = rf(id, changedDataFilm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateFilm provides a mock function with given fields: newFilm
func (_m *Films) CreateFilm(newFilm vk_test_task.CreateFilm) error {
	ret := _m.Called(newFilm)

	var r0 error
	if rf, ok := ret.Get(0).(func(vk_test_task.CreateFilm) error); ok {
		r0 = rf(newFilm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFilmById provides a mock function with given fields: id
func (_m *Films) DeleteFilmById(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllFilms provides a mock function with given fields: orderBy, q
func (_m *Films) GetAllFilms(orderBy string, q string) (*[]storage.Film, error) {
	ret := _m.Called(orderBy, q)

	var r0 *[]storage.Film
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*[]storage.Film, error)); ok {
		return rf(orderBy, q)
	}
	if rf, ok := ret.Get(0).(func(string, string) *[]storage.Film); ok {
		r0 = rf(orderBy, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]storage.Film)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orderBy, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilm provides a mock function with given fields: id
func (_m *Films) GetFilm(id string) (*storage.Film, error) {
	ret := _m.Called(id)

	var r0 *storage.Film
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*storage.Film, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *storage.Film); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Film)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchFilm provides a mock function with given fields: byTitle, byActor
func (_m *Films) SearchFilm(byTitle string, byActor string) (*[]storage.Film, error) {
	ret := _m.Called(byTitle, byActor)

	var r0 *[]storage.Film
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*[]storage.Film, error)); ok {
		return rf(byTitle, byActor)
	}
	if rf, ok := ret.Get(0).(func(string, string) *[]storage.Film); ok {
		r0 = rf(byTitle, byActor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]storage.Film)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(byTitle, byActor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFilms interface {
	mock.TestingT
	Cleanup(func())
}

// NewFilms creates a new instance of Films. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFilms(t mockConstructorTestingTNewFilms) *Films {
	mock := &Films{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
